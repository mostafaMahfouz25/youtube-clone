{"version":3,"sources":["api/Youtube.js","components/Search.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","Search","state","searchText","handleChange","e","setState","target","value","handleSubmit","preventDefault","onFormSubmit","props","className","onSubmit","this","id","onChange","placeholder","Component","VideoItem","item","onSelectedVideo","Fragment","style","cursor","onClick","src","snippet","thumbnails","default","url","title","VideoList","videos","length","map","index","key","VideoDetail","video","console","log","videoSrc","videoId","frameBorder","height","width","channelTitle","description","Loading","App","load","selectedVideo","text","a","Youtube","get","params","part","maxResults","q","res","data","items","getData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9dc16c34.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nexport default axios.create({\r\n    baseURL:'https://www.googleapis.com/youtube/v3'\r\n})","import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n\r\n    state={\r\n        searchText:''\r\n    }\r\n\r\n\r\n    handleChange = (e)=>{\r\n        this.setState({searchText:e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        \r\n        const {searchText} = this.state;\r\n        const {onFormSubmit} = this.props;\r\n        onFormSubmit(searchText);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-group border p-5\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label className=\"text-white\">Type Any Word Here</label>\r\n                    <input className=\"form-control\" id=\"search-text\" onChange={this.handleChange} value={this.state.searchText} placeholder=\"Type Here ....\" />\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\n\r\nexport default function VideoItem({item,onSelectedVideo}) {\r\n\r\n    return (\r\n        <React.Fragment>\r\n \r\n            <div className=\"card mb-3\" style={{cursor:\"pointer\"}} >\r\n\r\n                <div className=\"row no-gutters\" onClick={()=>onSelectedVideo(item)}>\r\n                    <div className=\"col-md-4\">\r\n                    <img src={item.snippet.thumbnails.default.url} className=\"card-img\" />\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{item.snippet.title}</h5>\r\n                        {/* <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p> */}\r\n                        {/* <p className=\"card-text\"><small className=\"text-muted\">Last updated 3 mins ago</small></p> */}\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport VideoItem from './VideoItem'\r\n\r\nexport class VideoList extends Component {\r\n\r\n    \r\n\r\n    render() {\r\n        if(!this.props.videos.length) return <div className=\"text-white text-center p-3\">Loading....</div>\r\n        const {onSelectedVideo} = this.props\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.videos.map((item,index)=>( \r\n                        <VideoItem  item={item} key={index} onSelectedVideo={onSelectedVideo} />\r\n                ))}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoList\r\n","import React from 'react'\r\n\r\nexport default function VideoDetail({video}) {\r\n\r\n    if(!video) return <div className=\"text-white text-center p-3\">Loading....</div>\r\n    console.log(video)\r\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\r\n    return (\r\n        <div>\r\n            <iframe frameBorder=\"0\" height=\"500\" width=\"100%\" src={videoSrc} />\r\n            <div className=\"card py-3 px-2\">\r\n                <h5 className=\"card-title px-2\">{video.snippet.title}</h5>\r\n                <h5 className=\"card-title px-2\">{video.snippet.channelTitle}</h5>\r\n                <p className=\"card-body\">  {video.snippet.description} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <div className=\"text-center\">\r\n            <img src='./loading.gif' />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport Youtube from './api/Youtube';\n\nimport {Search,VideoDetail,VideoList,Loading} from './components/index';\n\n\n\nclass App extends Component {\n\n  state={\n    load:false,\n    videos:[],\n    selectedVideo:''\n  }\n\n  handleSubmit = (text) =>{\n\n    const getData = async ()=>\n    {\n       this.setState({\n         load:true,\n       })\n      const res = await Youtube.get('search',{params:{\n        part:'snippet',\n        maxResults:5,\n        key:'AIzaSyBWTyDTDZAvEWWWEu3B0cgT0tzHvf65SW4',\n        q:text\n        }});\n\n        this.setState({\n          load:false,\n          videos:res.data.items,\n          selectedVideo:res.data.items[0]\n        })\n      \n    }\n    \n    getData();\n\n  } \n\n\n  onSelectedVideo = (item)=>{\n    // console.log(item)\n    this.setState({selectedVideo:item})\n  }\n\n    render()\n    {\n      const {selectedVideo,videos} = this.state;\n      return (\n        <div className=\"App\">\n            <h1 className=\"text-center text-primary display-4 border-bottom pb-2\">Youtube Clone App</h1>\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <Search   onFormSubmit={this.handleSubmit} />\n                </div>\n\n                {\n                  this.state.load ? <div className=\"col-sm-12\"><Loading /></div> :''\n                }\n                \n\n                <div className=\"col-md-8\">\n                  <VideoDetail video={selectedVideo}  />\n                </div>\n    \n    \n                <div className=\"col-md-4\">\n                  <VideoList videos={videos} onSelectedVideo={this.onSelectedVideo} />\n                </div>\n    \n    \n                \n              </div>\n            </div>\n        </div>\n      );\n    }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}